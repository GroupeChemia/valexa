import pandas as pd
from typing import Dict, Optional, Union, List

TestDataSet = Dict[str, Dict[str, pd.DataFrame]]


def dataset(
    data_set_name: Optional[str] = None,
) -> Union[List[str], Dict[str, pd.DataFrame]]:
    """
    These are example dataset that can be used to help you understand or test the library.
    The format of a dataset should be a dict with at least a Validation dataset and optionally a Calibration dataset.
    Both dataset should be pandas DataFrame with the following columns: Serie, Level, x, y.
    The Calibration dataset can have either one serie or a number of serie equal to the Validation dataset. If there is
    only one Calibration serie, Valexa will assume that the same calibration is used for all Validation series, else it
    will use a different calibration for each series.
    In the case of a dataset with no Calibration dataset, the Y dataset will be considered to be absolute (such as bacterial
    count for example).
    The source of the dataset found in this example are as follow:
    inra_pyrene: Huyez-Levrat, M et al.,Cahier technique de l'INRA - Validation des m√©thodes (2010), https://www6.inrae.fr/cahier_des_techniques/Les-Cahiers-parus/Les-n-Speciaux-et-les-n-Thematiques/Validation-des-methodes
    feinberg_nicotinamide: Feinberg, M., Labo-Stat (2010), https://www.lavoisier.fr/livre/sciences-de-la-vie/labo-stat/feinberg/descriptif-9782743014261
    intern_test: Own dataset (HPLC-UV) (2020)
    feinberg_coli: Feinberg, M. et al., Validation of Alternative Methods for the Analysis of Drinking Water and Their Application to Escherichia coli (2011), https://dx.doi.org/10.1128/AEM.00020-11
    sfstp: Hubert et al., Harmonization of strategies for the validation of quantitative analytical procedures. A SFSTP proposal - Part III (2004)
    feinberg_uncertainty: Feinberg et al., New advances in method validation and measurement uncertainty aimed at improving the quality of chemical data (2004), DOI 10.1007/s00216-004-2791-y
    :param data_set_name: Name of the dataset to return
    :return: A dict of DataFram
    """
    dataset_data: TestDataSet = {
        "inra_pyrene": {
            "Validation": pd.DataFrame(
                [
                    [1, 1, 1.9, 36539],
                    [1, 1, 1.9, 36785],
                    [2, 1, 1.9, 60086],
                    [2, 1, 1.9, 35295],
                    [3, 1, 1.9, 57695],
                    [3, 1, 1.9, 59731],
                    [1, 2, 4.7, 102066],
                    [1, 2, 4.7, 98495],
                    [2, 2, 4.7, 99897],
                    [2, 2, 4.7, 93547],
                    [3, 2, 4.7, 115298],
                    [3, 2, 4.7, 111584],
                    [1, 3, 9.5, 188665],
                    [1, 3, 9.5, 191294],
                    [2, 3, 9.5, 188657],
                    [2, 3, 9.5, 198683],
                    [3, 3, 9.5, 221678],
                    [3, 3, 9.5, 194983],
                    [1, 4, 28.5, 595999],
                    [1, 4, 28.5, 604704],
                    [2, 4, 28.5, 520857],
                    [2, 4, 28.5, 501025],
                    [3, 4, 28.5, 557258],
                    [3, 4, 28.5, 541355],
                ],
                columns=["Series", "Level", "x", "y"],
            ),
            "Calibration": pd.DataFrame(
                [
                    [1, 1, 0.9, 43083],
                    [2, 1, 0.9, 24719],
                    [3, 1, 0.9, 35684],
                    [1, 2, 4.6, 117767],
                    [2, 2, 4.6, 112319],
                    [3, 2, 4.6, 115840],
                    [1, 3, 9.2, 238120],
                    [2, 3, 9.2, 202957],
                    [3, 3, 9.2, 249807],
                    [1, 4, 18.4, 450132],
                    [2, 4, 18.4, 398342],
                    [3, 4, 18.4, 440029],
                    [1, 5, 27.6, 682393],
                    [2, 5, 27.6, 611523],
                    [3, 5, 27.6, 633748],
                ],
                columns=["Series", "Level", "x", "y"],
            ),
        },
        "feinberg_nicotinamide": {
            "Validation": pd.DataFrame(
                [
                    [1, 1, 0.4, 22.6],
                    [1, 1, 0.4, 22.1],
                    [1, 1, 0.4, 21.9],
                    [2, 1, 0.4, 23.3],
                    [2, 1, 0.4, 24.1],
                    [2, 1, 0.4, 23.9],
                    [3, 1, 0.4, 23.8],
                    [3, 1, 0.4, 23.6],
                    [3, 1, 0.4, 23.0],
                    [1, 2, 2, 135.0],
                    [1, 2, 2, 135.1],
                    [1, 2, 2, 129.9],
                    [2, 2, 2, 137.6],
                    [2, 2, 2, 135.2],
                    [2, 2, 2, 138.8],
                    [3, 2, 2, 136.3],
                    [3, 2, 2, 135.1],
                    [3, 2, 2, 134.4],
                    [1, 3, 4, 275.2],
                    [1, 3, 4, 276.9],
                    [1, 3, 4, 261.3],
                    [2, 3, 4, 268.1],
                    [2, 3, 4, 269.7],
                    [2, 3, 4, 276.9],
                    [3, 3, 4, 271.6],
                    [3, 3, 4, 273.3],
                    [3, 3, 4, 269.1],
                ],
                columns=["Series", "Level", "x", "y"],
            ),
            "Calibration": pd.DataFrame(
                [
                    [1, 1, 0.4, 22.7],
                    [1, 1, 0.4, 23.1],
                    [2, 1, 0.4, 22.5],
                    [2, 1, 0.4, 23.2],
                    [3, 1, 0.4, 21.7],
                    [3, 1, 0.4, 22.1],
                    [1, 2, 4, 281.6],
                    [1, 2, 4, 275.3],
                    [2, 2, 4, 275.3],
                    [2, 2, 4, 273.5],
                    [3, 2, 4, 270.8],
                    [3, 2, 4, 271.0],
                ],
                columns=["Series", "Level", "x", "y"],
            ),
        },
        "intern_test": {
            "Calibration": pd.DataFrame(
                [
                    [1, 1, 0.98, 5],
                    [1, 2, 3.9, 13],
                    [1, 3, 15.635, 58],
                    [1, 4, 62.5, 230],
                    [1, 5, 250, 890],
                    [1, 6, 500, 1616],
                    [1, 7, 1000, 3310],
                    [1, 1, 0.98, 5],
                    [1, 2, 3.9, 19],
                    [1, 3, 15.635, 57],
                    [1, 4, 62.5, 219],
                    [1, 5, 250, 898],
                    [1, 6, 500, 1623],
                    [1, 7, 1000, 3294],
                    [1, 1, 0.98, 6],
                    [1, 2, 3.9, 16],
                    [1, 3, 15.635, 63],
                    [1, 4, 62.5, 230],
                    [1, 5, 250, 887],
                    [1, 6, 500, 1660],
                    [1, 7, 1000, 3298],
                ],
                columns=["Series", "Level", "x", "y"],
            ),
            "Validation": pd.DataFrame(
                [
                    [1, 1, 0.7765, 6],
                    [1, 2, 1.563, 8],
                    [1, 3, 6.25, 25],
                    [1, 4, 25, 93],
                    [1, 5, 100, 348],
                    [1, 1, 0.7765, 7],
                    [1, 2, 1.563, 12],
                    [1, 3, 6.25, 25],
                    [1, 4, 25, 96],
                    [1, 5, 100, 350],
                    [1, 1, 0.7765, 9],
                    [1, 2, 1.563, 13],
                    [1, 3, 6.25, 27],
                    [1, 4, 25, 89],
                    [1, 5, 100, 349],
                    [2, 1, 0.7765, 5],
                    [2, 2, 1.563, 11],
                    [2, 3, 6.25, 28],
                    [2, 4, 25, 91],
                    [2, 5, 100, 332],
                    [2, 1, 0.7765, 5],
                    [2, 2, 1.563, 11],
                    [2, 3, 6.25, 31],
                    [2, 4, 25, 92],
                    [2, 5, 100, 329],
                    [2, 1, 0.7765, 6],
                    [2, 2, 1.563, 13],
                    [2, 3, 6.25, 26],
                    [2, 4, 25, 90],
                    [2, 5, 100, 333],
                    [2, 1, 0.7765, 3],
                    [2, 2, 1.563, 8],
                    [2, 3, 6.25, 25],
                    [2, 4, 25, 94],
                    [2, 5, 100, 333],
                    [2, 1, 0.7765, 4],
                    [2, 2, 1.563, 12],
                    [2, 3, 6.25, 32],
                    [2, 4, 25, 98],
                    [2, 5, 100, 351],
                    [2, 1, 0.7765, 9],
                    [2, 2, 1.563, 10],
                    [2, 3, 6.25, 34],
                    [2, 4, 25, 97],
                    [2, 5, 100, 345],
                    [3, 1, 0.7765, 7],
                    [3, 2, 1.563, 6],
                    [3, 3, 6.25, 24],
                    [3, 4, 25, 98],
                    [3, 5, 100, 370],
                    [3, 1, 0.7765, 6],
                    [3, 2, 1.563, 9],
                    [3, 3, 6.25, 27],
                    [3, 4, 25, 95],
                    [3, 5, 100, 361],
                    [3, 1, 0.7765, 6],
                    [3, 2, 1.563, 12],
                    [3, 3, 6.25, 21],
                    [3, 4, 25, 101],
                    [3, 5, 100, 364],
                ],
                columns=["Series", "Level", "x", "y"],
            ),
        },
        "feinberg_coli": {
            "Validation": pd.DataFrame(
                [
                    [1, 1, 5, 9],
                    [1, 1, 10, 10],
                    [2, 1, 19, 18],
                    [2, 1, 10, 14],
                    [3, 1, 10, 14],
                    [3, 1, 8, 11],
                    [4, 1, 14, 10],
                    [4, 1, 12, 14],
                    [5, 1, 14, 15],
                    [5, 1, 11, 11],
                    [6, 1, 9, 8],
                    [6, 1, 6, 3],
                    [7, 1, 9, 12],
                    [7, 1, 13, 9],
                    [8, 1, 4, 15],
                    [8, 1, 11, 7],
                    [9, 1, 9, 18],
                    [9, 1, 12, 11],
                    [10, 1, 13, 9],
                    [10, 1, 9, 8],
                    [11, 1, 15, 9],
                    [11, 1, 8, 12],
                    [1, 2, 39, 53],
                    [1, 2, 29, 36],
                    [2, 2, 72, 62],
                    [2, 2, 52, 53],
                    [3, 2, 65, 95],
                    [3, 2, 64, 78],
                    [4, 2, 67, 48],
                    [4, 2, 66, 78],
                    [5, 2, 52, 34],
                    [5, 2, 56, 38],
                    [6, 2, 30, 62],
                    [6, 2, 50, 89],
                    [7, 2, 55, 56],
                    [7, 2, 51, 59],
                    [8, 2, 33, 88],
                    [8, 2, 44, 50],
                    [9, 2, 53, 66],
                    [9, 2, 54, 62],
                    [10, 2, 46, 59],
                    [10, 2, 65, 74],
                    [11, 2, 45, 59],
                    [11, 2, 52, 48],
                    [1, 3, 105, 202],
                    [1, 3, 112, 130],
                    [2, 3, 139, 145],
                    [2, 3, 142, 118],
                    [3, 3, 105, 201],
                    [3, 3, 124, 145],
                    [4, 3, 146, 200],
                    [4, 3, 124, 200],
                    [5, 3, 80, 50],
                    [5, 3, 78, 50],
                    [6, 3, 70, 130],
                    [6, 3, 90, 130],
                    [7, 3, 131, 145],
                    [7, 3, 136, 130],
                    [8, 3, 89, 130],
                    [8, 3, 90, 200],
                    [9, 3, 130, 118],
                    [9, 3, 133, 202],
                    [10, 3, 130, 202],
                    [10, 3, 112, 130],
                    [11, 3, 90, 118],
                    [11, 3, 74, 165],
                ],
                columns=["Series", "Level", "x", "y"],
            )
        },
        "sfstp": {
            "Validation": pd.DataFrame(
                [
                    [1, 1, 25.3533, 0.0439],
                    [1, 1, 25.3533, 0.0488],
                    [1, 1, 25.3533, 0.0480],
                    [1, 1, 25.3533, 0.0484],
                    [1, 2, 48.2417, 0.0949],
                    [1, 2, 48.2417, 0.0927],
                    [1, 2, 48.2417, 0.0887],
                    [1, 2, 48.2417, 0.1015],
                    [1, 3, 437.8235, 0.9873],
                    [1, 3, 437.8235, 1.0136],
                    [1, 3, 437.8235, 1.0288],
                    [1, 3, 437.8235, 1.0173],
                    [1, 4, 838.6479, 2.0220],
                    [1, 4, 838.6479, 1.9901],
                    [1, 4, 838.6479, 2.0937],
                    [1, 4, 838.6479, 2.0189],
                    [2, 1, 25.3533, 0.0371],
                    [2, 1, 25.3533, 0.0422],
                    [2, 1, 25.3533, 0.0461],
                    [2, 1, 25.3533, 0.0448],
                    [2, 2, 48.2417, 0.0922],
                    [2, 2, 48.2417, 0.0916],
                    [2, 2, 48.2417, 0.0854],
                    [2, 2, 48.2417, 0.0918],
                    [2, 3, 437.8235, 0.9718],
                    [2, 3, 437.8235, 1.0322],
                    [2, 3, 437.8235, 1.0342],
                    [2, 3, 437.8235, 1.0319],
                    [2, 4, 838.6479, 1.9252],
                    [2, 4, 838.6479, 2.0284],
                    [2, 4, 838.6479, 2.0127],
                    [2, 4, 838.6479, 2.0273],
                    [3, 1, 25.3533, 0.0444],
                    [3, 1, 25.3533, 0.0457],
                    [3, 1, 25.3533, 0.0502],
                    [3, 1, 25.3533, 0.0475],
                    [3, 2, 48.2417, 0.0956],
                    [3, 2, 48.2417, 0.1023],
                    [3, 2, 48.2417, 0.1007],
                    [3, 2, 48.2417, 0.1092],
                    [3, 3, 437.8235, 1.0392],
                    [3, 3, 437.8235, 1.1132],
                    [3, 3, 437.8235, 1.1419],
                    [3, 3, 437.8235, 1.0751],
                    [3, 4, 838.6479, 2.1272],
                    [3, 4, 838.6479, 2.2127],
                    [3, 4, 838.6479, 2.2699],
                    [3, 4, 838.6479, 2.2546],
                ],
                columns=["Series", "Level", "x", "y"],
            ),
            "Calibration": pd.DataFrame(
                [
                    [1, 1, 25.3533, 0.0485],
                    [1, 1, 25.3533, 0.0448],
                    [1, 2, 48.2417, 0.0959],
                    [1, 2, 48.2417, 0.0870],
                    [1, 3, 96.4833, 0.1974],
                    [1, 3, 96.4833, 0.2057],
                    [1, 4, 223.8496, 0.5589],
                    [1, 4, 223.8496, 0.5667],
                    [1, 5, 437.8235, 1.1041],
                    [1, 5, 437.8235, 1.0961],
                    [1, 6, 964.8233, 2.3960],
                    [1, 6, 964.8233, 2.3861],
                    [2, 1, 25.3533, 0.0358],
                    [2, 1, 25.3533, 0.0402],
                    [2, 2, 48.2417, 0.1025],
                    [2, 2, 48.2417, 0.0993],
                    [2, 3, 96.4833, 0.2046],
                    [2, 3, 96.4833, 0.1996],
                    [2, 4, 223.8496, 0.5371],
                    [2, 4, 223.8496, 0.5066],
                    [2, 5, 437.8235, 0.9963],
                    [2, 5, 437.8235, 1.0568],
                    [2, 6, 964.8233, 2.2877],
                    [2, 6, 964.8233, 2.2500],
                    [3, 1, 25.3533, 0.0449],
                    [3, 1, 25.3533, 0.0415],
                    [3, 2, 48.2417, 0.0987],
                    [3, 2, 48.2417, 0.0892],
                    [3, 3, 96.4833, 0.2036],
                    [3, 3, 96.4833, 0.2082],
                    [3, 4, 223.8496, 0.5095],
                    [3, 4, 223.8496, 0.5756],
                    [3, 5, 437.8235, 1.1726],
                    [3, 5, 437.8235, 1.1772],
                    [3, 6, 964.8233, 2.4528],
                    [3, 6, 964.8233, 2.3147],
                ],
                columns=["Series", "Level", "x", "y"],
            ),
        },
        "feinberg_uncertainty": {
            "Validation": pd.DataFrame(
                [
                    [1, 1, 25.35, 0.0440],
                    [1, 1, 25.35, 0.0490],
                    [1, 1, 25.35, 0.0480],
                    [1, 2, 437.82, 0.9870],
                    [1, 2, 437.82, 1.0140],
                    [1, 2, 437.82, 1.0290],
                    [1, 3, 838.65, 2.0220],
                    [1, 3, 838.65, 1.9900],
                    [1, 3, 838.65, 2.0940],
                    [2, 1, 25.35, 0.0370],
                    [2, 1, 25.35, 0.0420],
                    [2, 1, 25.35, 0.0460],
                    [2, 2, 437.82, 0.9720],
                    [2, 2, 437.82, 1.0320],
                    [2, 2, 437.82, 1.0340],
                    [2, 3, 838.65, 1.9250],
                    [2, 3, 838.65, 2.0280],
                    [2, 3, 838.65, 2.0130],
                    [3, 1, 25.35, 0.0440],
                    [3, 1, 25.35, 0.0460],
                    [3, 1, 25.35, 0.0500],
                    [3, 2, 437.82, 1.0390],
                    [3, 2, 437.82, 1.1130],
                    [3, 2, 437.82, 1.1420],
                    [3, 3, 838.65, 2.1270],
                    [3, 3, 838.65, 2.2130],
                    [3, 3, 838.65, 2.2700],
                ],
                columns=["Series", "Level", "x", "y"],
            ),
            "Calibration": pd.DataFrame(
                [
                    [1, 1, 25.35, 0.0485],
                    [1, 1, 25.35, 0.0448],
                    [1, 2, 48.24, 0.0959],
                    [1, 2, 48.24, 0.0870],
                    [1, 3, 223.85, 0.5589],
                    [1, 3, 223.85, 0.5667],
                    [1, 4, 437.82, 1.1041],
                    [1, 4, 437.82, 1.0961],
                    [1, 5, 964.83, 2.3960],
                    [1, 5, 964.83, 2.3861],
                    [2, 1, 25.35, 0.0358],
                    [2, 1, 25.35, 0.0402],
                    [2, 2, 48.24, 0.1025],
                    [2, 2, 48.24, 0.0993],
                    [2, 3, 223.85, 0.5371],
                    [2, 3, 223.85, 0.5066],
                    [2, 4, 437.82, 0.9963],
                    [2, 4, 437.82, 1.0568],
                    [2, 5, 964.83, 2.2877],
                    [2, 5, 964.83, 2.2500],
                    [3, 1, 25.35, 0.0449],
                    [3, 1, 25.35, 0.0415],
                    [3, 2, 48.24, 0.0987],
                    [3, 2, 48.24, 0.0892],
                    [3, 3, 223.85, 0.5095],
                    [3, 3, 223.85, 0.5756],
                    [3, 4, 437.82, 1.1725],
                    [3, 4, 437.82, 1.1772],
                    [3, 5, 964.83, 2.4528],
                    [3, 5, 964.83, 2.3147],
                ],
                columns=["Series", "Level", "x", "y"],
            ),
        },
    }

    if data_set_name is None:
        return list(dataset_data.keys())
    else:
        try:
            return dataset_data[data_set_name]
        except KeyError:
            print(
                "Invalid dataset name, the available name are: "
                + ", ".join(list(dataset_data.keys()))
            )
            raise
